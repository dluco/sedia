#!/usr/bin/env bash
#
#	sedia: simple session dialog
#
#	Copyright (C) 2014, David J. Luco <davidjluco@gmail.com>
#
#	This program is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; either version 2 of the License, or
#	(at your option) any later version.
#	
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#	
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#	MA 02110-1301, USA.

name=$(basename "$0")
longname="Sedia - Session Dialog"
version="0.0.0"

# Helpers
error()
{
	echo "$name: $*" 2>&1
}

message()
{
	echo "$name: $*"
}

exit_normal()
{
	exit 0
}

exit_error()
{
	exit 1
}

exit_cancel()
{
	exit 2
}

die()
{
	error "$*"
	exit_error
}

# Source configuration file(s)
if [[ -n "$1" ]]; then
	if [[ -f "$1" ]]; then
		source "$1"
	else
		die "config file \"$1\" does not exit"
	fi
elif [[ -f "$HOME/.sediarc" ]]; then
	source "$HOME/.sediarc"
elif [[ -f /etc/sediarc ]]; then
	source /etc/sediarc
fi

# Default settings - must be applied after
# configuration files are sourced.
session_dir="${session_dir:-/usr/share/xsessions}"
default_session=${default_session:-none}
timeout=${timeout:-0}
start_index="${start_index:-0}"
dialogrc=${dialogrc:-}

# Check if session_dir exists
if [[ ! -d "$session_dir" ]]; then
	die "xsession dir \"$session_dir\" does not exit"
fi

# Find available xsessions
sessions=($(find "$session_dir" -name *.desktop | sort))

# Check if there were files in session_dir
[[ -z "$sessions" ]] && \
	die "no xsessions found in \"$session_dir\""

# startx(1) command to prepend to every session
startx_cmd=(
	startx ~/.xinitrc
)

name_list=()
exec_list=()
menu_items=()
is_default="off"

# Populate name_list, exec_list, and menu_items
for ((count = 0; count < ${#sessions[@]}; count++)); do
	session_name=$(grep -Po "(?<=^Name=).*" ${sessions[$count]})
	session_exec=$(grep -Po "(?<=^Exec=).*" ${sessions[$count]})
	name_list[$count]="${session_name}"
	exec_list[$count]="${startx_cmd[@]} ${session_exec}"
	# Check if this is the default session specified in rcfile.
	# If default_session is unspecified ("none"), then first menu item will be selected.
	if [[ "$session_name" == "$default_session" || ("$default_session" == "none" && "$count" == 0) ]]; then
		is_default="on"
	else
		is_default="off"
	fi
	menu_items+=("$((count + start_index))" "$session_name" "$is_default")
done

# Append console option to end:
# Simply drop user back into shell
name_list+=("Console")
exec_list+=("$SHELL")
if [[ "Console" == "$default_session" ]]; then
	is_default="on"
else
	is_default="off"
fi
menu_items+=("$((count + start_index))" "Console" "$is_default")

dialog_cmd=(
	dialog --backtitle "$longname v$version" \
	--ok-label "Confirm" --cancel-label "Exit" \
	--timeout "$timeout" --radiolist "Select Session" 0 0 0
)

# Run dialog and retrieve choice
index=$(DIALOGRC="$dialogrc" "${dialog_cmd[@]}" "${menu_items[@]}" 2>&1 >/dev/tty)
err=$?

# Clear screen
clear

if [[ $err != 0 ]]; then
# Cancelled by user
	exit_cancel
fi

# Get true index of chosen item
let index-=start_index

message "starting session: ${name_list[$index]}"

# Execute selected item
exec ${exec_list[$index]}
